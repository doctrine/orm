<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.6.0@e784128902dfe01d489c4123d69918a9f3c1eac5">
  <file src="lib/Doctrine/ORM/AbstractQuery.php">
    <DeprecatedClass>
      <code>IterableResult</code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code>iterate</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code>in_array($fetchMode, [Mapping\ClassMetadata::FETCH_EAGER, Mapping\ClassMetadata::FETCH_LAZY], true)</code>
    </DocblockTypeContradiction>
    <FalsableReturnStatement>
      <code>! $filteredParameters-&gt;isEmpty() ? $filteredParameters-&gt;first() : null</code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType>
      <code>Parameter|null</code>
    </InvalidFalsableReturnType>
    <InvalidNullableReturnType>
      <code>\Doctrine\Common\Cache\Cache</code>
    </InvalidNullableReturnType>
    <MissingClosureParamType>
      <code>$alias</code>
      <code>$data</code>
      <code>$data</code>
    </MissingClosureParamType>
    <NullableReturnStatement>
      <code>$this-&gt;_em-&gt;getConfiguration()-&gt;getResultCacheImpl()</code>
      <code>$this-&gt;_queryCacheProfile-&gt;getResultCacheDriver()</code>
    </NullableReturnStatement>
    <PossiblyInvalidArgument>
      <code>$stmt</code>
      <code>$stmt</code>
    </PossiblyInvalidArgument>
    <PossiblyNullReference>
      <code>getCacheLogger</code>
      <code>getQueryCache</code>
    </PossiblyNullReference>
    <RedundantCastGivenDocblockType>
      <code>(bool) $cacheable</code>
      <code>(int) $cacheMode</code>
      <code>(int) $lifetime</code>
      <code>(string) $cacheRegion</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Cache/CacheConfiguration.php">
    <PossiblyNullReference>
      <code>getTimestampRegion</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Cache/CollectionCacheKey.php">
    <RedundantCastGivenDocblockType>
      <code>(string) $association</code>
      <code>(string) $entityClass</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Cache/DefaultCache.php">
    <InvalidOperand>
      <code>! $association['type']</code>
    </InvalidOperand>
    <PossiblyNullPropertyAssignmentValue>
      <code>$em-&gt;getConfiguration()
            -&gt;getSecondLevelCacheConfiguration()
            -&gt;getCacheFactory()</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyNullReference>
      <code>getCacheFactory</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Cache/DefaultCacheFactory.php">
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code>$this-&gt;fileLockRegionDirectory</code>
    </NullableReturnStatement>
    <RedundantCastGivenDocblockType>
      <code>(string) $fileLockRegionDirectory</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Cache/DefaultEntityHydrator.php">
    <InvalidArgument>
      <code>$em-&gt;getMetadataFactory()</code>
    </InvalidArgument>
    <PossiblyNullArrayOffset>
      <code>$targetClassMetadata-&gt;associationMappings</code>
    </PossiblyNullArrayOffset>
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinColumnFieldNames']</code>
      <code>$assoc['targetToSourceKeyColumns']</code>
      <code>$owningAssociation['targetToSourceKeyColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <UndefinedInterfaceMethod>
      <code>getCacheRegion</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Cache/DefaultQueryCache.php">
    <ArgumentTypeCoercion>
      <code>$assocKeys-&gt;identifiers[$assocIndex]</code>
      <code>$assocKeys-&gt;identifiers[$assocIndex]</code>
      <code>$cacheKeys-&gt;identifiers[$index]</code>
      <code>$cacheKeys-&gt;identifiers[$index]</code>
    </ArgumentTypeCoercion>
    <MissingClosureParamType>
      <code>$id</code>
    </MissingClosureParamType>
    <NoInterfaceProperties>
      <code>$assocEntry-&gt;class</code>
      <code>$assocEntry-&gt;class</code>
    </NoInterfaceProperties>
    <PossiblyNullReference>
      <code>getCacheLogger</code>
    </PossiblyNullReference>
    <RedundantCondition>
      <code>assert($cm instanceof ClassMetadata)</code>
    </RedundantCondition>
    <UndefinedInterfaceMethod>
      <code>getCacheRegion</code>
      <code>resolveAssociationEntries</code>
      <code>resolveAssociationEntries</code>
      <code>storeEntityCache</code>
      <code>storeEntityCache</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Cache/Persister/Collection/AbstractCollectionPersister.php">
    <ArgumentTypeCoercion>
      <code>$cache</code>
      <code>$entityKey</code>
    </ArgumentTypeCoercion>
    <NoInterfaceProperties>
      <code>$entry-&gt;identifiers</code>
    </NoInterfaceProperties>
    <PossiblyNullArgument>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>buildCollectionHydrator</code>
      <code>getCacheFactory</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Cache/Persister/Collection/NonStrictReadWriteCachedCollectionPersister.php">
    <PossiblyNullArgument>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Cache/Persister/Collection/ReadOnlyCachedCollectionPersister.php">
    <PossiblyNullArgument>
      <code>$collection-&gt;getOwner()</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Cache/Persister/Collection/ReadWriteCachedCollectionPersister.php">
    <PossiblyNullArgument>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
    </PossiblyNullArgument>
    <UndefinedInterfaceMethod>
      <code>lock</code>
      <code>lock</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Cache/Persister/Entity/AbstractEntityPersister.php">
    <ArgumentTypeCoercion>
      <code>$cacheEntry</code>
    </ArgumentTypeCoercion>
    <MissingReturnType>
      <code>loadAll</code>
    </MissingReturnType>
    <NoInterfaceProperties>
      <code>$cacheEntry-&gt;class</code>
    </NoInterfaceProperties>
    <PossiblyNullArgument>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>$em-&gt;getCache()</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyNullReference>
      <code>getCacheFactory</code>
      <code>getTimestampRegion</code>
    </PossiblyNullReference>
    <RedundantConditionGivenDocblockType>
      <code>assert($metadata instanceof ClassMetadata)</code>
    </RedundantConditionGivenDocblockType>
    <UndefinedInterfaceMethod>
      <code>getCacheRegion</code>
      <code>getCacheRegion</code>
      <code>getCacheRegion</code>
      <code>getCacheRegion</code>
      <code>loadCollectionCache</code>
      <code>loadCollectionCache</code>
      <code>storeCollectionCache</code>
      <code>storeCollectionCache</code>
      <code>storeEntityCache</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Cache/Persister/Entity/ReadWriteCachedEntityPersister.php">
    <RedundantCondition>
      <code>$isChanged</code>
    </RedundantCondition>
    <UndefinedInterfaceMethod>
      <code>lock</code>
      <code>lock</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Cache/Region/DefaultRegion.php">
    <LessSpecificReturnStatement>
      <code>$this-&gt;cache</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>CacheProvider</code>
    </MoreSpecificReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Cache/RegionsConfiguration.php">
    <RedundantCastGivenDocblockType>
      <code>(int) $defaultLifetime</code>
      <code>(int) $defaultLifetime</code>
      <code>(int) $defaultLockLifetime</code>
      <code>(int) $defaultLockLifetime</code>
      <code>(int) $lifetime</code>
      <code>(int) $lifetime</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Cache/TimestampCacheEntry.php">
    <RedundantCastGivenDocblockType>
      <code>(float) $time</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Cache/TimestampCacheKey.php">
    <RedundantCastGivenDocblockType>
      <code>(string) $space</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Cache/TimestampQueryCacheValidator.php">
    <NoInterfaceProperties>
      <code>$timestamp-&gt;time</code>
    </NoInterfaceProperties>
  </file>
  <file src="lib/Doctrine/ORM/Configuration.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>getMetadataCacheImpl</code>
      <code>getQueryCacheImpl</code>
    </DeprecatedMethod>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Decorator/EntityManagerDecorator.php">
    <DeprecatedMethod>
      <code>copy</code>
      <code>getHydrator</code>
      <code>transactional</code>
      <code>transactional</code>
    </DeprecatedMethod>
    <InvalidReturnStatement>
      <code>$this-&gt;wrapped-&gt;getClassMetadata($className)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>getClassMetadata</code>
    </InvalidReturnType>
    <MissingParamType>
      <code>$entity</code>
      <code>$lockMode</code>
      <code>$lockVersion</code>
    </MissingParamType>
    <MissingReturnType>
      <code>wrapInTransaction</code>
    </MissingReturnType>
    <MoreSpecificImplementedParamType>
      <code>$className</code>
    </MoreSpecificImplementedParamType>
    <TooManyArguments>
      <code>find</code>
      <code>flush</code>
    </TooManyArguments>
  </file>
  <file src="lib/Doctrine/ORM/EntityManager.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$connection</code>
      <code>$entityName</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>getMetadataCacheImpl</code>
      <code>merge</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code>$entityName !== null &amp;&amp; ! is_string($entityName)</code>
      <code>is_object($entity)</code>
      <code>is_object($entity)</code>
      <code>is_object($entity)</code>
      <code>is_object($entity)</code>
      <code>is_object($entity)</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch>
      <code>ClassMetadataFactory</code>
    </ImplementedReturnTypeMismatch>
    <InvalidReturnStatement>
      <code>$entity</code>
      <code>$entity</code>
      <code>$entity</code>
      <code>$entity</code>
      <code>$entity instanceof $class-&gt;name ? $entity : null</code>
      <code>$entity instanceof $class-&gt;name ? $entity : null</code>
      <code>$persister-&gt;load($sortedId, null, null, [], $lockMode)</code>
      <code>$persister-&gt;loadById($sortedId)</code>
      <code>$this-&gt;metadataFactory-&gt;getMetadataFor($className)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>?T</code>
      <code>getClassMetadata</code>
    </InvalidReturnType>
    <MissingReturnType>
      <code>wrapInTransaction</code>
    </MissingReturnType>
    <ParamNameMismatch>
      <code>$entity</code>
      <code>$entity</code>
      <code>$entity</code>
      <code>$entity</code>
      <code>$entity</code>
      <code>$entityName</code>
      <code>$entityName</code>
    </ParamNameMismatch>
    <PossiblyNullArgument>
      <code>$config-&gt;getProxyDir()</code>
      <code>$config-&gt;getProxyNamespace()</code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>createCache</code>
      <code>getCacheFactory</code>
    </PossiblyNullReference>
    <PropertyTypeCoercion>
      <code>new $metadataFactoryClassName()</code>
    </PropertyTypeCoercion>
    <RedundantCastGivenDocblockType>
      <code>(string) $hydrationMode</code>
    </RedundantCastGivenDocblockType>
    <RedundantCondition>
      <code>$repository instanceof EntityRepository</code>
      <code>is_object($connection)</code>
    </RedundantCondition>
    <TypeDoesNotContainType>
      <code>': "' . $connection . '"'</code>
    </TypeDoesNotContainType>
    <UnsafeInstantiation>
      <code>new $class($this)</code>
    </UnsafeInstantiation>
  </file>
  <file src="lib/Doctrine/ORM/EntityRepository.php">
    <DeprecatedMethod>
      <code>addNamedNativeQueryMapping</code>
    </DeprecatedMethod>
    <InvalidReturnStatement>
      <code>$persister-&gt;load($criteria, null, null, [], null, 1, $orderBy)</code>
      <code>new LazyCriteriaCollection($persister, $criteria)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>?T</code>
      <code>AbstractLazyCollection&lt;int, T&gt;&amp;Selectable&lt;int, T&gt;</code>
    </InvalidReturnType>
    <TooManyArguments>
      <code>find</code>
    </TooManyArguments>
  </file>
  <file src="lib/Doctrine/ORM/Event/OnClassMetadataNotFoundEventArgs.php">
    <RedundantCastGivenDocblockType>
      <code>(string) $className</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Exception/ORMException.php">
    <DeprecatedClass>
      <code>BaseORMException</code>
    </DeprecatedClass>
  </file>
  <file src="lib/Doctrine/ORM/Id/AssignedGenerator.php">
    <PossiblyNullArgument>
      <code>$entity</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Id/SequenceGenerator.php">
    <MethodSignatureMustProvideReturnType>
      <code>serialize</code>
      <code>unserialize</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Id/TableGenerator.php">
    <PossiblyFalseOperand>
      <code>$currentLevel</code>
      <code>$this-&gt;_nextValue</code>
      <code>$this-&gt;_nextValue</code>
    </PossiblyFalseOperand>
    <UndefinedMethod>
      <code>getTableHiLoCurrentValSql</code>
      <code>getTableHiLoUpdateNextValSql</code>
    </UndefinedMethod>
  </file>
  <file src="lib/Doctrine/ORM/Internal/CommitOrderCalculator.php">
    <RedundantCondition>
      <code>$vertex-&gt;state !== VertexState::VISITED</code>
      <code>$vertex-&gt;state !== VertexState::VISITED</code>
    </RedundantCondition>
  </file>
  <file src="lib/Doctrine/ORM/Internal/Hydration/AbstractHydrator.php">
    <DeprecatedClass>
      <code>IterableResult</code>
      <code>new IterableResult($this)</code>
    </DeprecatedClass>
    <PossiblyUndefinedArrayOffset>
      <code>$class-&gt;associationMappings[$fieldName]['joinColumns']</code>
      <code>$class-&gt;associationMappings[$fieldName]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <ReferenceConstraintViolation>
      <code>return $rowData;</code>
      <code>return $rowData;</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="lib/Doctrine/ORM/Internal/Hydration/ArrayHydrator.php">
    <PossiblyInvalidArgument>
      <code>$index</code>
    </PossiblyInvalidArgument>
    <PossiblyNullArrayAssignment>
      <code>$result[$resultKey]</code>
      <code>$result[$resultKey]</code>
    </PossiblyNullArrayAssignment>
    <PossiblyUndefinedArrayOffset>
      <code>$newObject['args']</code>
    </PossiblyUndefinedArrayOffset>
    <ReferenceConstraintViolation>
      <code>$result</code>
    </ReferenceConstraintViolation>
    <ReferenceReusedFromConfusingScope>
      <code>$baseElement</code>
    </ReferenceReusedFromConfusingScope>
    <UnsupportedReferenceUsage>
      <code>$baseElement =&amp; $this-&gt;_resultPointers[$parent][key($first)]</code>
      <code>$this-&gt;_resultPointers[$dqlAlias] =&amp; $coll[key($coll)]</code>
    </UnsupportedReferenceUsage>
  </file>
  <file src="lib/Doctrine/ORM/Internal/Hydration/IterableResult.php">
    <ImplementedReturnTypeMismatch>
      <code>mixed[]|false</code>
    </ImplementedReturnTypeMismatch>
    <MissingTemplateParam>
      <code>Iterator</code>
    </MissingTemplateParam>
    <PossiblyFalsePropertyAssignmentValue>
      <code>$this-&gt;_hydrator-&gt;hydrateRow()</code>
      <code>$this-&gt;next()</code>
    </PossiblyFalsePropertyAssignmentValue>
    <RedundantConditionGivenDocblockType>
      <code>$this-&gt;_current !== false</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Internal/Hydration/ObjectHydrator.php">
    <PossiblyFalseArgument>
      <code>$index</code>
    </PossiblyFalseArgument>
    <PossiblyInvalidArgument>
      <code>$parentObject</code>
      <code>$parentObject</code>
      <code>$parentObject</code>
      <code>$parentObject</code>
      <code>$parentObject</code>
      <code>$parentObject</code>
      <code>$parentObject</code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code>$relation['mappedBy']</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayOffset>
      <code>$targetClass-&gt;reflFields</code>
    </PossiblyNullArrayOffset>
    <PossiblyNullReference>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code>$class-&gt;associationMappings[$class-&gt;identifier[0]]['joinColumns']</code>
      <code>$class-&gt;associationMappings[$fieldName]['joinColumns']</code>
      <code>$newObject['args']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Internal/Hydration/SimpleObjectHydrator.php">
    <PropertyNotSetInConstructor>
      <code>$class</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Builder/ClassMetadataBuilder.php">
    <ArgumentTypeCoercion>
      <code>$repositoryClassName</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>addNamedQuery</code>
    </DeprecatedMethod>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Builder/EntityListenerBuilder.php">
    <PossiblyNullArgument>
      <code>$class</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Builder/FieldBuilder.php">
    <PropertyNotSetInConstructor>
      <code>$generatedValue</code>
      <code>$sequenceDef</code>
      <code>$version</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
      <code>(string) $customIdGenerator</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/ClassMetadata.php">
    <PropertyNotSetInConstructor>
      <code>ClassMetadata</code>
      <code>ClassMetadata</code>
      <code>ClassMetadata</code>
      <code>ClassMetadata</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/ClassMetadataFactory.php">
    <ArgumentTypeCoercion>
      <code>$class</code>
      <code>$class</code>
      <code>new $definition['class']()</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>new UuidGenerator()</code>
    </DeprecatedClass>
    <DeprecatedConstant>
      <code>ClassMetadata::GENERATOR_TYPE_UUID</code>
    </DeprecatedConstant>
    <DeprecatedMethod>
      <code>addNamedNativeQuery</code>
      <code>addNamedQuery</code>
    </DeprecatedMethod>
    <InvalidArrayOffset>
      <code>$subClass-&gt;table[$indexType][$indexName]</code>
    </InvalidArrayOffset>
    <InvalidPropertyAssignmentValue>
      <code>$subClass-&gt;table</code>
    </InvalidPropertyAssignmentValue>
    <MissingConstructor>
      <code>$driver</code>
      <code>$evm</code>
    </MissingConstructor>
    <PossiblyInvalidArrayAssignment>
      <code>$subClass-&gt;table[$indexType][$indexName]</code>
    </PossiblyInvalidArrayAssignment>
    <PossiblyInvalidIterator>
      <code>$parentClass-&gt;table[$indexType]</code>
    </PossiblyInvalidIterator>
    <PossiblyNullArgument>
      <code>$this-&gt;em</code>
      <code>$this-&gt;em</code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyAssignmentValue>
      <code>$this-&gt;em-&gt;getConfiguration()-&gt;getMetadataDriverImpl()</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyNullReference>
      <code>getConfiguration</code>
      <code>getConfiguration</code>
      <code>getConfiguration</code>
      <code>getConfiguration</code>
      <code>getConfiguration</code>
      <code>getConnection</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/ClassMetadataInfo.php">
    <ArgumentTypeCoercion>
      <code>$mapping</code>
    </ArgumentTypeCoercion>
    <DeprecatedConstant>
      <code>self::GENERATOR_TYPE_UUID</code>
    </DeprecatedConstant>
    <DeprecatedMethod>
      <code>canEmulateSchemas</code>
      <code>canRequireSQLConversion</code>
    </DeprecatedMethod>
    <DeprecatedProperty>
      <code>$this-&gt;columnNames</code>
      <code>$this-&gt;columnNames</code>
      <code>$this-&gt;columnNames</code>
      <code>$this-&gt;columnNames</code>
    </DeprecatedProperty>
    <DocblockTypeContradiction>
      <code>! $this-&gt;table</code>
      <code>! class_exists($mapping['targetEntity'])</code>
      <code>$this-&gt;table</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$overrideMapping</code>
    </InvalidArgument>
    <InvalidNullableReturnType>
      <code>ReflectionProperty</code>
      <code>ReflectionProperty</code>
      <code>getAssociationMappedByTargetField</code>
    </InvalidNullableReturnType>
    <InvalidPropertyAssignmentValue>
      <code>$definition</code>
      <code>$this-&gt;identifier</code>
      <code>$this-&gt;sqlResultSetMappings</code>
      <code>$this-&gt;subClasses</code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$this-&gt;reflClass</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>AssociationMapping</code>
      <code>array{
     *                   mappedBy: mixed,
     *                   inversedBy: mixed,
     *                   isOwningSide: bool,
     *                   sourceEntity: string,
     *                   targetEntity: string,
     *                   fieldName: mixed,
     *                   fetch: int|mixed,
     *                   cascade: array&lt;array-key,string&gt;,
     *                   isCascadeRemove: bool,
     *                   isCascadePersist: bool,
     *                   isCascadeRefresh: bool,
     *                   isCascadeMerge: bool,
     *                   isCascadeDetach: bool,
     *                   orphanRemoval: bool
     *               }</code>
      <code>array{
     *      mappedBy: mixed|null,
     *      inversedBy: mixed|null,
     *      isOwningSide: bool,
     *      sourceEntity: class-string,
     *      targetEntity: string,
     *      fieldName: mixed,
     *      fetch: mixed,
     *      cascade: array&lt;string&gt;,
     *      isCascadeRemove: bool,
     *      isCascadePersist: bool,
     *      isCascadeRefresh: bool,
     *      isCascadeMerge: bool,
     *      isCascadeDetach: bool,
     *      type: int,
     *      originalField: string,
     *      originalClass: class-string,
     *      joinColumns?: array{0: array{name: string, referencedColumnName: string}}|mixed,
     *      id?: mixed,
     *      sourceToTargetKeyColumns?: array&lt;string, string&gt;,
     *      joinColumnFieldNames?: array&lt;string, string&gt;,
     *      targetToSourceKeyColumns?: array&lt;string, string&gt;,
     *      orphanRemoval: bool
     * }</code>
      <code>getReflectionClass</code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code>$cache</code>
      <code>$className</code>
      <code>$className</code>
      <code>$columnNames</code>
      <code>$mapping</code>
      <code>$quotedColumnNames</code>
      <code>$this-&gt;namespace . '\\' . $className</code>
    </LessSpecificReturnStatement>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MoreSpecificReturnType>
      <code>array{
     *      mappedBy: mixed,
     *      inversedBy: mixed,
     *      isOwningSide: bool,
     *      sourceEntity: class-string,
     *      targetEntity: string,
     *      fieldName: mixed,
     *      fetch: mixed,
     *      cascade: array&lt;string&gt;,
     *      isCascadeRemove: bool,
     *      isCascadePersist: bool,
     *      isCascadeRefresh: bool,
     *      isCascadeMerge: bool,
     *      isCascadeDetach: bool,
     *      type: int,
     *      originalField: string,
     *      originalClass: class-string,
     *      joinTable?: array{inverseJoinColumns: mixed}|mixed,
     *      joinTableColumns?: list&lt;mixed&gt;,
     *      isOnDeleteCascade?: true,
     *      relationToSourceKeyColumns?: array,
     *      relationToTargetKeyColumns?: array,
     *      orphanRemoval: bool
     * }</code>
      <code>array{usage: int, region: string|null}</code>
      <code>class-string|null</code>
      <code>list&lt;string&gt;</code>
      <code>list&lt;string&gt;</code>
    </MoreSpecificReturnType>
    <NullableReturnStatement>
      <code>$this-&gt;associationMappings[$fieldName]['mappedBy']</code>
      <code>$this-&gt;reflClass</code>
      <code>$this-&gt;reflFields[$name]</code>
      <code>$this-&gt;reflFields[$this-&gt;identifier[0]]</code>
    </NullableReturnStatement>
    <ParamNameMismatch>
      <code>$entity</code>
      <code>$fieldName</code>
      <code>$fieldName</code>
    </ParamNameMismatch>
    <PossiblyNullArgument>
      <code>$class</code>
      <code>$className</code>
      <code>$entityResult['entityClass']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$parentReflFields[$embeddedClass['declaredField']]</code>
      <code>$parentReflFields[$mapping['declaredField']]</code>
      <code>$queryMapping['resultClass']</code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyFetch>
      <code>$embeddable-&gt;reflClass-&gt;name</code>
      <code>$this-&gt;reflClass-&gt;name</code>
    </PossiblyNullPropertyFetch>
    <PossiblyNullReference>
      <code>getProperty</code>
      <code>getProperty</code>
      <code>getProperty</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>instantiate</code>
      <code>setValue</code>
      <code>setValue</code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code>$mapping['fieldName']</code>
      <code>$mapping['originalClass']</code>
      <code>$mapping['originalField']</code>
      <code>$mapping['targetEntity']</code>
      <code>$table['name']</code>
      <code>$this-&gt;associationMappings[$assocName]['joinColumns']</code>
      <code>$this-&gt;associationMappings[$fieldName]['joinColumns']</code>
      <code>$this-&gt;associationMappings[$fieldName]['joinColumns']</code>
      <code>$this-&gt;associationMappings[$idProperty]['joinColumns']</code>
      <code>$this-&gt;associationMappings[$idProperty]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <PropertyNotSetInConstructor>
      <code>$idGenerator</code>
      <code>$namespace</code>
      <code>$table</code>
      <code>$tableGeneratorDefinition</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code>$identifier</code>
      <code>$this-&gt;associationMappings</code>
      <code>$this-&gt;associationMappings</code>
      <code>$this-&gt;entityListeners</code>
      <code>$this-&gt;fieldMappings</code>
      <code>$this-&gt;fullyQualifiedClassName($repositoryClassName)</code>
      <code>$this-&gt;table</code>
      <code>$this-&gt;table</code>
      <code>$this-&gt;table</code>
      <code>$this-&gt;table</code>
      <code>$this-&gt;table</code>
      <code>$this-&gt;table</code>
    </PropertyTypeCoercion>
    <RedundantConditionGivenDocblockType>
      <code>$mapping !== false</code>
      <code>$mapping !== false</code>
    </RedundantConditionGivenDocblockType>
    <RedundantFunctionCall>
      <code>array_values</code>
    </RedundantFunctionCall>
    <TooManyArguments>
      <code>joinColumnName</code>
      <code>joinColumnName</code>
    </TooManyArguments>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/ColumnResult.php">
    <MissingConstructor>
      <code>$name</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/DefaultEntityListenerResolver.php">
    <DocblockTypeContradiction>
      <code>is_object($object)</code>
    </DocblockTypeContradiction>
    <InvalidStringClass>
      <code>new $className()</code>
    </InvalidStringClass>
    <PropertyTypeCoercion>
      <code>$this-&gt;instances</code>
    </PropertyTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/DefaultNamingStrategy.php">
    <PossiblyFalseOperand>
      <code>strrpos($className, '\\')</code>
    </PossiblyFalseOperand>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/DefaultQuoteStrategy.php">
    <DeprecatedMethod>
      <code>canEmulateSchemas</code>
      <code>canEmulateSchemas</code>
    </DeprecatedMethod>
    <LessSpecificReturnStatement>
      <code>$quotedColumnNames</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>getIdentifierColumnNames</code>
    </MoreSpecificReturnType>
    <PossiblyUndefinedArrayOffset>
      <code>$class-&gt;associationMappings[$fieldName]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/DefaultTypedFieldMapper.php">
    <PropertyTypeCoercion>
      <code>array_merge(self::DEFAULT_TYPED_FIELD_MAPPINGS, $typedFieldMappings)</code>
    </PropertyTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/AnnotationDriver.php">
    <DeprecatedMethod>
      <code>addNamedNativeQuery</code>
      <code>addNamedQuery</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>[
                            'sequenceName' =&gt; $seqGeneratorAnnot-&gt;sequenceName,
                            'allocationSize' =&gt; $seqGeneratorAnnot-&gt;allocationSize,
                            'initialValue' =&gt; $seqGeneratorAnnot-&gt;initialValue,
                        ]</code>
    </InvalidArgument>
    <LessSpecificReturnStatement>
      <code>$mapping</code>
    </LessSpecificReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$metadata</code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType>
      <code>array{
     *                   fieldName: string,
     *                   type: mixed,
     *                   scale: int,
     *                   length: int,
     *                   unique: bool,
     *                   nullable: bool,
     *                   precision: int,
     *                   notInsertable?: bool,
     *                   notUpdateble?: bool,
     *                   generated?: ClassMetadata::GENERATED_*,
     *                   enumType?: class-string,
     *                   options?: mixed[],
     *                   columnName?: string,
     *                   columnDefinition?: string
     *               }</code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument>
      <code>$listenerClassName</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code>$primaryTable['indexes']</code>
      <code>$primaryTable['uniqueConstraints']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code>$metadata-&gt;getReflectionClass()</code>
    </RedundantCondition>
    <TypeDoesNotContainNull>
      <code>new ReflectionClass($metadata-&gt;name)</code>
    </TypeDoesNotContainNull>
    <UndefinedInterfaceMethod>
      <code>mapEmbedded</code>
      <code>mapManyToMany</code>
      <code>mapManyToOne</code>
      <code>mapOneToMany</code>
      <code>mapOneToOne</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/AttributeDriver.php">
    <InvalidArgument>
      <code>[
                            'name'             =&gt; isset($discrColumnAttribute-&gt;name) ? (string) $discrColumnAttribute-&gt;name : null,
                            'type'             =&gt; isset($discrColumnAttribute-&gt;type) ? (string) $discrColumnAttribute-&gt;type : 'string',
                            'length'           =&gt; isset($discrColumnAttribute-&gt;length) ? (int) $discrColumnAttribute-&gt;length : 255,
                            'columnDefinition' =&gt; isset($discrColumnAttribute-&gt;columnDefinition) ? (string) $discrColumnAttribute-&gt;columnDefinition : null,
                            'enumType'         =&gt; isset($discrColumnAttribute-&gt;enumType) ? (string) $discrColumnAttribute-&gt;enumType : null,
                        ]</code>
      <code>[
                            'sequenceName' =&gt; $seqGeneratorAttribute-&gt;sequenceName,
                            'allocationSize' =&gt; $seqGeneratorAttribute-&gt;allocationSize,
                            'initialValue' =&gt; $seqGeneratorAttribute-&gt;initialValue,
                        ]</code>
    </InvalidArgument>
    <LessSpecificReturnStatement>
      <code>$mapping</code>
    </LessSpecificReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$metadata</code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType>
      <code>array{
     *                   fieldName: string,
     *                   type: mixed,
     *                   scale: int,
     *                   length: int,
     *                   unique: bool,
     *                   nullable: bool,
     *                   precision: int,
     *                   enumType?: class-string,
     *                   options?: mixed[],
     *                   columnName?: string,
     *                   columnDefinition?: string
     *               }</code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument>
      <code>$listenerClassName</code>
    </PossiblyNullArgument>
    <RedundantCondition>
      <code>$metadata-&gt;getReflectionClass()</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>assert($cacheAttribute instanceof Mapping\Cache)</code>
      <code>assert($method instanceof ReflectionMethod)</code>
      <code>assert($method instanceof ReflectionMethod)</code>
      <code>assert($property instanceof ReflectionProperty)</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainNull>
      <code>new ReflectionClass($metadata-&gt;name)</code>
    </TypeDoesNotContainNull>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/DatabaseDriver.php">
    <DocblockTypeContradiction>
      <code>$metadata instanceof ClassMetadata</code>
    </DocblockTypeContradiction>
    <LessSpecificReturnStatement>
      <code>$this-&gt;namespace . $this-&gt;classNamesForTables[$tableName]</code>
      <code>$this-&gt;namespace . $this-&gt;inflector-&gt;classify(strtolower($tableName))</code>
    </LessSpecificReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$metadata</code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType>
      <code>class-string</code>
    </MoreSpecificReturnType>
    <PossiblyNullArrayAccess>
      <code>$this-&gt;tables[$tableName]</code>
      <code>$this-&gt;tables[$tableName]</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullReference>
      <code>getColumns</code>
      <code>getColumns</code>
      <code>getIndexes</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/PHPDriver.php">
    <PropertyNotSetInConstructor>
      <code>PHPDriver</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/SimplifiedXmlDriver.php">
    <MissingParamType>
      <code>$fileExtension</code>
      <code>$prefixes</code>
    </MissingParamType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/SimplifiedYamlDriver.php">
    <MissingParamType>
      <code>$fileExtension</code>
      <code>$prefixes</code>
    </MissingParamType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/XmlDriver.php">
    <ArgumentTypeCoercion>
      <code>(string) $xmlRoot['repository-class']</code>
      <code>isset($xmlRoot['repository-class']) ? (string) $xmlRoot['repository-class'] : null</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>addNamedNativeQuery</code>
      <code>addNamedQuery</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>[
                            'name' =&gt; isset($discrColumn['name']) ? (string) $discrColumn['name'] : null,
                            'type' =&gt; isset($discrColumn['type']) ? (string) $discrColumn['type'] : 'string',
                            'length' =&gt; isset($discrColumn['length']) ? (int) $discrColumn['length'] : 255,
                            'columnDefinition' =&gt; isset($discrColumn['column-definition']) ? (string) $discrColumn['column-definition'] : null,
                            'enumType' =&gt; isset($discrColumn['enum-type']) ? (string) $discrColumn['enum-type'] : null,
                        ]</code>
    </InvalidArgument>
    <InvalidPropertyAssignmentValue>
      <code>$metadata-&gt;table</code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code>$mapping</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>array{
      *                   fieldName: string,
      *                   type?: string,
      *                   columnName?: string,
      *                   length?: int,
      *                   precision?: int,
      *                   scale?: int,
      *                   unique?: bool,
      *                   nullable?: bool,
      *                   notInsertable?: bool,
      *                   notUpdatable?: bool,
      *                   enumType?: string,
      *                   version?: bool,
      *                   columnDefinition?: string,
      *                   options?: array
      *               }</code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code>[
            'usage'  =&gt; $usage,
            'region' =&gt; $region,
        ]</code>
    </LessSpecificReturnStatement>
    <MissingParamType>
      <code>$fileExtension</code>
      <code>$locator</code>
    </MissingParamType>
    <MoreSpecificImplementedParamType>
      <code>$metadata</code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType>
      <code>array{usage: int|null, region?: string}</code>
    </MoreSpecificReturnType>
    <NoInterfaceProperties>
      <code>$indexXml-&gt;options</code>
      <code>$uniqueXml-&gt;options</code>
      <code>$xmlRoot-&gt;{'discriminator-column'}</code>
      <code>$xmlRoot-&gt;{'discriminator-map'}</code>
    </NoInterfaceProperties>
    <PossiblyInvalidPropertyFetch>
      <code>$indexXml-&gt;options</code>
      <code>$uniqueXml-&gt;options</code>
      <code>$xmlRoot-&gt;{'discriminator-column'}</code>
      <code>$xmlRoot-&gt;{'discriminator-map'}</code>
    </PossiblyInvalidPropertyFetch>
    <RedundantCondition>
      <code>isset($xmlRoot-&gt;cache)</code>
      <code>isset($xmlRoot-&gt;embedded)</code>
      <code>isset($xmlRoot-&gt;field)</code>
      <code>isset($xmlRoot-&gt;indexes)</code>
      <code>isset($xmlRoot-&gt;options)</code>
      <code>isset($xmlRoot-&gt;{'association-overrides'})</code>
      <code>isset($xmlRoot-&gt;{'attribute-overrides'})</code>
      <code>isset($xmlRoot-&gt;{'entity-listeners'})</code>
      <code>isset($xmlRoot-&gt;{'lifecycle-callbacks'})</code>
      <code>isset($xmlRoot-&gt;{'many-to-many'})</code>
      <code>isset($xmlRoot-&gt;{'many-to-one'})</code>
      <code>isset($xmlRoot-&gt;{'named-native-queries'})</code>
      <code>isset($xmlRoot-&gt;{'named-queries'})</code>
      <code>isset($xmlRoot-&gt;{'one-to-many'})</code>
      <code>isset($xmlRoot-&gt;{'one-to-one'})</code>
      <code>isset($xmlRoot-&gt;{'sql-result-set-mappings'})</code>
      <code>isset($xmlRoot-&gt;{'unique-constraints'})</code>
    </RedundantCondition>
    <TypeDoesNotContainType>
      <code>$xmlRoot-&gt;getName() === 'embeddable'</code>
      <code>$xmlRoot-&gt;getName() === 'entity'</code>
      <code>$xmlRoot-&gt;getName() === 'mapped-superclass'</code>
    </TypeDoesNotContainType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Driver/YamlDriver.php">
    <DeprecatedMethod>
      <code>addNamedNativeQuery</code>
      <code>addNamedQuery</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>[
                            'name' =&gt; isset($discrColumn['name']) ? (string) $discrColumn['name'] : null,
                            'type' =&gt; isset($discrColumn['type']) ? (string) $discrColumn['type'] : 'string',
                            'length' =&gt; isset($discrColumn['length']) ? (int) $discrColumn['length'] : 255,
                            'columnDefinition' =&gt; isset($discrColumn['columnDefinition']) ? (string) $discrColumn['columnDefinition'] : null,
                            'enumType' =&gt; isset($discrColumn['enumType']) ? (string) $discrColumn['enumType'] : null,
                        ]</code>
    </InvalidArgument>
    <LessSpecificReturnStatement>
      <code>[
            'usage'  =&gt; $usage,
            'region' =&gt; $region,
        ]</code>
    </LessSpecificReturnStatement>
    <MissingParamType>
      <code>$fileExtension</code>
      <code>$locator</code>
    </MissingParamType>
    <MoreSpecificImplementedParamType>
      <code>$metadata</code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType>
      <code>array{usage: int|null, region: string|null}</code>
    </MoreSpecificReturnType>
    <PossiblyUndefinedMethod>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
    </PossiblyUndefinedMethod>
    <PropertyTypeCoercion>
      <code>$metadata-&gt;table</code>
    </PropertyTypeCoercion>
    <UndefinedInterfaceMethod>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
      <code>$element</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/Embedded.php">
    <MissingParamType>
      <code>$columnPrefix</code>
    </MissingParamType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/EntityResult.php">
    <MissingConstructor>
      <code>$discriminatorColumn</code>
      <code>$entityClass</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/FieldResult.php">
    <MissingConstructor>
      <code>$column</code>
      <code>$name</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/JoinColumns.php">
    <MissingConstructor>
      <code>$value</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/JoinTable.php">
    <MissingParamType>
      <code>$inverseJoinColumns</code>
      <code>$joinColumns</code>
    </MissingParamType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/MappingException.php">
    <ArgumentTypeCoercion>
      <code>$className</code>
      <code>$entityName</code>
    </ArgumentTypeCoercion>
    <MissingParamType>
      <code>$className</code>
      <code>$className</code>
      <code>$indexName</code>
      <code>$indexName</code>
    </MissingParamType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/NamedNativeQuery.php">
    <MissingConstructor>
      <code>$name</code>
      <code>$query</code>
      <code>$resultClass</code>
      <code>$resultSetMapping</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/NamedQueries.php">
    <MissingConstructor>
      <code>$value</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/NamedQuery.php">
    <MissingConstructor>
      <code>$name</code>
      <code>$query</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/ReflectionEmbeddedProperty.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;embeddedClass</code>
    </ArgumentTypeCoercion>
    <MissingParamType>
      <code>$object</code>
      <code>$object</code>
      <code>$value</code>
    </MissingParamType>
    <PropertyNotSetInConstructor>
      <code>ReflectionEmbeddedProperty</code>
      <code>ReflectionEmbeddedProperty</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(string) $embeddedClass</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/ReflectionEnumProperty.php">
    <PropertyNotSetInConstructor>
      <code>ReflectionEnumProperty</code>
      <code>ReflectionEnumProperty</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/ReflectionReadonlyProperty.php">
    <PropertyNotSetInConstructor>
      <code>ReflectionReadonlyProperty</code>
      <code>ReflectionReadonlyProperty</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/SqlResultSetMapping.php">
    <MissingConstructor>
      <code>$name</code>
    </MissingConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Mapping/UnderscoreNamingStrategy.php">
    <PossiblyFalseOperand>
      <code>strrpos($className, '\\')</code>
    </PossiblyFalseOperand>
  </file>
  <file src="lib/Doctrine/ORM/NativeQuery.php">
    <PropertyNotSetInConstructor>
      <code>$sql</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/ORMInvalidArgumentException.php">
    <PossiblyInvalidArgument>
      <code>$entity</code>
    </PossiblyInvalidArgument>
  </file>
  <file src="lib/Doctrine/ORM/PersistentCollection.php">
    <ImplementedReturnTypeMismatch>
      <code>Collection&lt;TKey, T&gt;</code>
      <code>object|null</code>
      <code>object|null</code>
    </ImplementedReturnTypeMismatch>
    <InvalidReturnStatement>
      <code>$this-&gt;association['fetch'] === ClassMetadata::FETCH_EXTRA_LAZY
            ? new LazyCriteriaCollection($persister, $criteria)
            : new ArrayCollection($persister-&gt;loadCriteria($criteria))</code>
      <code>$this-&gt;em-&gt;find($this-&gt;typeClass-&gt;name, $key)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>Collection&lt;TKey, T&gt;</code>
    </InvalidReturnType>
    <LessSpecificReturnStatement>
      <code>$this-&gt;unwrap()-&gt;matching($criteria)</code>
    </LessSpecificReturnStatement>
    <MissingParamType>
      <code>$offset</code>
    </MissingParamType>
    <ParamNameMismatch>
      <code>$value</code>
      <code>$value</code>
    </ParamNameMismatch>
    <PossiblyNullArgument>
      <code>$this-&gt;association</code>
      <code>$this-&gt;association</code>
      <code>$this-&gt;association</code>
      <code>$this-&gt;association['targetEntity']</code>
      <code>$this-&gt;backRefFieldName</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess>
      <code>$this-&gt;association['fetch']</code>
      <code>$this-&gt;association['fetch']</code>
      <code>$this-&gt;association['fetch']</code>
      <code>$this-&gt;association['fetch']</code>
      <code>$this-&gt;association['fetch']</code>
      <code>$this-&gt;association['isOwningSide']</code>
      <code>$this-&gt;association['orphanRemoval']</code>
      <code>$this-&gt;association['targetEntity']</code>
      <code>$this-&gt;association['type']</code>
      <code>$this-&gt;association['type']</code>
      <code>$this-&gt;association['type']</code>
      <code>$this-&gt;association['type']</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullReference>
      <code>setValue</code>
      <code>setValue</code>
    </PossiblyNullReference>
    <UndefinedMethod>
      <code>[$this-&gt;unwrap(), 'add']</code>
    </UndefinedMethod>
  </file>
  <file src="lib/Doctrine/ORM/Persisters/Collection/ManyToManyPersister.php">
    <PossiblyNullArgument>
      <code>$association</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$filterMapping</code>
      <code>$filterMapping</code>
      <code>$indexBy</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping</code>
      <code>$mapping['joinTableColumns']</code>
      <code>$mapping['relationToSourceKeyColumns']</code>
      <code>$mapping['relationToSourceKeyColumns'][$joinTableColumn]</code>
      <code>$mapping['relationToTargetKeyColumns'][$joinTableColumn]</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$owner</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess>
      <code>$mapping['indexBy']</code>
      <code>$mapping['isOwningSide']</code>
      <code>$mapping['isOwningSide']</code>
      <code>$mapping['isOwningSide']</code>
      <code>$mapping['isOwningSide']</code>
      <code>$mapping['isOwningSide']</code>
      <code>$mapping['joinTable']</code>
      <code>$mapping['joinTable']</code>
      <code>$mapping['joinTable']</code>
      <code>$mapping['joinTable']</code>
      <code>$mapping['joinTable']['inverseJoinColumns']</code>
      <code>$mapping['joinTable']['inverseJoinColumns']</code>
      <code>$mapping['joinTable']['inverseJoinColumns']</code>
      <code>$mapping['joinTable']['joinColumns']</code>
      <code>$mapping['joinTable']['joinColumns']</code>
      <code>$mapping['joinTable']['joinColumns']</code>
      <code>$mapping['joinTableColumns']</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['relationToSourceKeyColumns']</code>
      <code>$mapping['relationToSourceKeyColumns']</code>
      <code>$mapping['relationToSourceKeyColumns']</code>
      <code>$mapping['relationToSourceKeyColumns'][$joinTableColumn]</code>
      <code>$mapping['relationToTargetKeyColumns']</code>
      <code>$mapping['relationToTargetKeyColumns'][$joinTableColumn]</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullArrayOffset>
      <code>$associationSourceClass-&gt;associationMappings</code>
      <code>$sourceClass-&gt;associationMappings</code>
      <code>$targetClass-&gt;associationMappings</code>
    </PossiblyNullArrayOffset>
    <PossiblyNullIterator>
      <code>$joinColumns</code>
      <code>$mapping['joinTable']['inverseJoinColumns']</code>
      <code>$mapping['joinTable']['inverseJoinColumns']</code>
      <code>$mapping['joinTable']['joinColumns']</code>
      <code>$mapping['joinTable']['joinColumns']</code>
      <code>$mapping['joinTable']['joinColumns']</code>
      <code>$mapping['joinTableColumns']</code>
      <code>$mapping['relationToSourceKeyColumns']</code>
    </PossiblyNullIterator>
    <PossiblyNullReference>
      <code>getFieldForColumn</code>
      <code>getFieldForColumn</code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code>$association['joinTable']</code>
      <code>$association['joinTable']</code>
      <code>$association['joinTable']</code>
      <code>$association['joinTable']</code>
      <code>$mapping[$sourceRelationMode]</code>
      <code>$mapping[$targetRelationMode]</code>
      <code>$mapping['joinTable']</code>
      <code>$mapping['joinTableColumns']</code>
      <code>$mapping['joinTableColumns']</code>
      <code>$mapping['relationToSourceKeyColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Persisters/Collection/OneToManyPersister.php">
    <ImplementedReturnTypeMismatch>
      <code>int|null</code>
    </ImplementedReturnTypeMismatch>
    <InvalidReturnStatement>
      <code>$numDeleted</code>
      <code>$this-&gt;conn-&gt;executeStatement($statement, $parameters)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>int</code>
      <code>int</code>
    </InvalidReturnType>
    <PossiblyNullArgument>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$mapping</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['mappedBy']</code>
      <code>$mapping['orphanRemoval']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['sourceEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
      <code>$mapping['targetEntity']</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullArrayOffset>
      <code>$targetClass-&gt;associationMappings</code>
    </PossiblyNullArrayOffset>
    <PossiblyUndefinedArrayOffset>
      <code>$targetClass-&gt;associationMappings[$mapping['mappedBy']]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Persisters/Entity/BasicEntityPersister.php">
    <DocblockTypeContradiction>
      <code>$value === null</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$em-&gt;getMetadataFactory()</code>
      <code>$hints</code>
      <code>$hints</code>
      <code>[Query::HINT_REFRESH =&gt; true]</code>
      <code>[UnitOfWork::HINT_DEFEREAGERLOAD =&gt; true]</code>
      <code>[UnitOfWork::HINT_DEFEREAGERLOAD =&gt; true]</code>
    </InvalidArgument>
    <InvalidNullableReturnType>
      <code>loadOneToOneEntity</code>
    </InvalidNullableReturnType>
    <LessSpecificReturnStatement>
      <code>$newValue</code>
      <code>$postInsertIds</code>
      <code>[$params, $types]</code>
      <code>[$sqlParams, $sqlTypes]</code>
    </LessSpecificReturnStatement>
    <MissingReturnType>
      <code>loadAll</code>
    </MissingReturnType>
    <MoreSpecificReturnType>
      <code>executeInserts</code>
      <code>expandCriteriaParameters</code>
      <code>expandParameters</code>
      <code>list&lt;mixed&gt;</code>
    </MoreSpecificReturnType>
    <NullableReturnStatement>
      <code>$targetEntity</code>
      <code>$targetEntity</code>
    </NullableReturnStatement>
    <PossiblyNullArgument>
      <code>$assoc['mappedBy']</code>
      <code>$association</code>
      <code>$type</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess>
      <code>$assoc['isOwningSide']</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullArrayOffset>
      <code>$class-&gt;associationMappings</code>
      <code>$class-&gt;associationMappings</code>
    </PossiblyNullArrayOffset>
    <PossiblyNullReference>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>setValue</code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['inversedBy']</code>
      <code>$assoc['joinColumns']</code>
      <code>$assoc['joinColumns']</code>
      <code>$assoc['relationToTargetKeyColumns']</code>
      <code>$assoc['sourceToTargetKeyColumns']</code>
      <code>$association['joinColumns']</code>
      <code>$association['joinColumns']</code>
      <code>$association['joinColumns']</code>
      <code>$association['joinTable']</code>
      <code>$association['joinTable']</code>
      <code>$association['joinTable']</code>
      <code>$association['joinTable']</code>
      <code>$owningAssoc['targetToSourceKeyColumns']</code>
      <code>$owningAssoc['targetToSourceKeyColumns']</code>
      <code>$this-&gt;class-&gt;associationMappings[$fieldName]['joinColumns']</code>
      <code>$this-&gt;class-&gt;associationMappings[$idField]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <PropertyTypeCoercion>
      <code>$this-&gt;currentPersisterContext-&gt;sqlTableAliases</code>
    </PropertyTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Persisters/Entity/CachedPersisterContext.php">
    <PropertyNotSetInConstructor>
      <code>$selectJoinSql</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code>$class</code>
    </PropertyTypeCoercion>
    <RedundantCastGivenDocblockType>
      <code>(bool) $handlesLimits</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Persisters/Entity/EntityPersister.php">
    <MissingReturnType>
      <code>loadAll</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Persisters/Entity/JoinedSubclassPersister.php">
    <LessSpecificReturnStatement>
      <code>$postInsertIds</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>executeInserts</code>
    </MoreSpecificReturnType>
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['targetToSourceKeyColumns']</code>
      <code>$mapping['joinColumns']</code>
      <code>$mapping['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Persisters/Entity/SingleTablePersister.php">
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedVariable>
      <code>$columnList</code>
    </PossiblyUndefinedVariable>
  </file>
  <file src="lib/Doctrine/ORM/Proxy/Proxy.php">
    <MissingTemplateParam>
      <code>BaseProxy</code>
    </MissingTemplateParam>
  </file>
  <file src="lib/Doctrine/ORM/Proxy/ProxyFactory.php">
    <ArgumentTypeCoercion>
      <code>$classMetadata</code>
      <code>$classMetadata</code>
      <code>$classMetadata</code>
    </ArgumentTypeCoercion>
    <InvalidArgument>
      <code>$classMetadata-&gt;getReflectionProperties()</code>
      <code>$em-&gt;getMetadataFactory()</code>
      <code>$em-&gt;getMetadataFactory()</code>
    </InvalidArgument>
    <NoInterfaceProperties>
      <code>$metadata-&gt;isEmbeddedClass</code>
      <code>$metadata-&gt;isMappedSuperclass</code>
      <code>$proxy-&gt;__isCloning</code>
    </NoInterfaceProperties>
    <PossiblyNullPropertyFetch>
      <code>$property-&gt;name</code>
      <code>$property-&gt;name</code>
    </PossiblyNullPropertyFetch>
    <PossiblyNullReference>
      <code>setAccessible</code>
      <code>setAccessible</code>
    </PossiblyNullReference>
    <UndefinedInterfaceMethod>
      <code>__wakeup</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="lib/Doctrine/ORM/Query.php">
    <DeprecatedClass>
      <code>IterableResult</code>
    </DeprecatedClass>
    <DeprecatedMethod>
      <code>parent::iterate($parameters, $hydrationMode)</code>
    </DeprecatedMethod>
    <InvalidArgument>
      <code>$sqlParams</code>
    </InvalidArgument>
    <LessSpecificReturnStatement>
      <code>$this-&gt;parse()-&gt;getSqlExecutor()-&gt;getSqlStatements()</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>list&lt;string&gt;|string</code>
    </MoreSpecificReturnType>
    <PossiblyNullArgument>
      <code>$this-&gt;getDQL()</code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>evictEntityRegion</code>
    </PossiblyNullReference>
    <PropertyNotSetInConstructor>
      <code>$parserResult</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ArithmeticFactor.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ArithmeticTerm.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/BetweenExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/CoalesceExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ComparisonExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ConditionalExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ConditionalFactor.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ConditionalPrimary.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ConditionalTerm.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/DeleteClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/DeleteStatement.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/EmptyCollectionComparisonExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/ExistsExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/FromClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/AbsFunction.php">
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;SimpleArithmeticExpression()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/BitAndFunction.php">
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;ArithmeticPrimary()</code>
      <code>$parser-&gt;ArithmeticPrimary()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/BitOrFunction.php">
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;ArithmeticPrimary()</code>
      <code>$parser-&gt;ArithmeticPrimary()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/DateAddFunction.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
    </ArgumentTypeCoercion>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;ArithmeticPrimary()</code>
      <code>$parser-&gt;ArithmeticPrimary()</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
    <UndefinedPropertyFetch>
      <code>$this-&gt;unit-&gt;value</code>
    </UndefinedPropertyFetch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/DateDiffFunction.php">
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;ArithmeticPrimary()</code>
      <code>$parser-&gt;ArithmeticPrimary()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/DateSubFunction.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
      <code>$this-&gt;intervalExpression-&gt;dispatch($sqlWalker)</code>
    </ArgumentTypeCoercion>
    <UndefinedPropertyFetch>
      <code>$this-&gt;unit-&gt;value</code>
    </UndefinedPropertyFetch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/FunctionNode.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/IdentityFunction.php">
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/LengthFunction.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;stringPrimary</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/LocateFunction.php">
    <PossiblyInvalidArgument>
      <code>$this-&gt;simpleArithmeticExpression</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;SimpleArithmeticExpression()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/LowerFunction.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;stringPrimary</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/ModFunction.php">
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;SimpleArithmeticExpression()</code>
      <code>$parser-&gt;SimpleArithmeticExpression()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/SizeFunction.php">
    <PossiblyNullArrayOffset>
      <code>$targetClass-&gt;associationMappings</code>
      <code>$targetClass-&gt;associationMappings</code>
    </PossiblyNullArrayOffset>
    <PossiblyUndefinedArrayOffset>
      <code>$owningAssoc['joinTable']</code>
      <code>$owningAssoc['targetToSourceKeyColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/SqrtFunction.php">
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;SimpleArithmeticExpression()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/SubstringFunction.php">
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$parser-&gt;SimpleArithmeticExpression()</code>
      <code>$parser-&gt;SimpleArithmeticExpression()</code>
    </PossiblyInvalidPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Functions/UpperFunction.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;stringPrimary</code>
    </ArgumentTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/GeneralCaseExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/GroupByClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/HavingClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/IdentificationVariableDeclaration.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/InExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/IndexBy.php">
    <DeprecatedProperty>
      <code>$this-&gt;simpleStateFieldPathExpression</code>
    </DeprecatedProperty>
    <InvalidNullableReturnType>
      <code>dispatch</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code>$sqlWalker-&gt;walkIndexBy($this)</code>
    </NullableReturnStatement>
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/InstanceOfExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Join.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/JoinAssociationDeclaration.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/JoinClassPathExpression.php">
    <UndefinedMethod>
      <code>walkJoinPathExpression</code>
    </UndefinedMethod>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/JoinVariableDeclaration.php">
    <UndefinedMethod>
      <code>walkJoinVariableDeclaration</code>
    </UndefinedMethod>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/LikeExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/NewObjectExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Node.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/NullComparisonExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/NullIfExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/OrderByClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/OrderByItem.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/QuantifiedExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SelectClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SelectExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SelectStatement.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SimpleArithmeticExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SimpleCaseExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SimpleSelectClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SimpleSelectExpression.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SimpleWhenClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
    <UndefinedMethod>
      <code>walkWhenClauseExpression</code>
    </UndefinedMethod>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/Subselect.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/SubselectFromClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/UpdateClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/UpdateItem.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/UpdateStatement.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/WhenClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
    <UndefinedMethod>
      <code>walkWhenClauseExpression</code>
    </UndefinedMethod>
  </file>
  <file src="lib/Doctrine/ORM/Query/AST/WhereClause.php">
    <ParamNameMismatch>
      <code>$sqlWalker</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/Exec/AbstractSqlExecutor.php">
    <PossiblyNullPropertyAssignmentValue>
      <code>null</code>
    </PossiblyNullPropertyAssignmentValue>
  </file>
  <file src="lib/Doctrine/ORM/Query/Exec/MultiTableDeleteExecutor.php">
    <InvalidReturnStatement>
      <code>$numDeleted</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>int</code>
    </InvalidReturnType>
    <PossiblyInvalidIterator>
      <code>$this-&gt;_sqlStatements</code>
    </PossiblyInvalidIterator>
    <PropertyNotSetInConstructor>
      <code>MultiTableDeleteExecutor</code>
      <code>MultiTableDeleteExecutor</code>
    </PropertyNotSetInConstructor>
    <UninitializedProperty>
      <code>$this-&gt;_sqlStatements</code>
    </UninitializedProperty>
  </file>
  <file src="lib/Doctrine/ORM/Query/Exec/MultiTableUpdateExecutor.php">
    <InvalidReturnStatement>
      <code>$numUpdated</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>int</code>
    </InvalidReturnType>
    <PossiblyInvalidIterator>
      <code>$this-&gt;_sqlStatements</code>
    </PossiblyInvalidIterator>
    <PropertyNotSetInConstructor>
      <code>MultiTableUpdateExecutor</code>
      <code>MultiTableUpdateExecutor</code>
    </PropertyNotSetInConstructor>
    <PropertyTypeCoercion>
      <code>$this-&gt;_sqlStatements</code>
    </PropertyTypeCoercion>
    <UninitializedProperty>
      <code>$this-&gt;_sqlStatements</code>
    </UninitializedProperty>
  </file>
  <file src="lib/Doctrine/ORM/Query/Exec/SingleSelectExecutor.php">
    <PossiblyInvalidArgument>
      <code>$this-&gt;_sqlStatements</code>
    </PossiblyInvalidArgument>
    <PropertyNotSetInConstructor>
      <code>SingleSelectExecutor</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Query/Exec/SingleTableDeleteUpdateExecutor.php">
    <InvalidReturnStatement>
      <code>$conn-&gt;executeStatement($this-&gt;_sqlStatements, $params, $types)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>int</code>
    </InvalidReturnType>
    <PossiblyInvalidArgument>
      <code>$this-&gt;_sqlStatements</code>
    </PossiblyInvalidArgument>
    <PropertyNotSetInConstructor>
      <code>SingleTableDeleteUpdateExecutor</code>
      <code>SingleTableDeleteUpdateExecutor</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr.php">
    <MissingParamType>
      <code>$y</code>
    </MissingParamType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Andx.php">
    <NonInvariantDocblockPropertyType>
      <code>$allowedClasses</code>
      <code>$parts</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Base.php">
    <InvalidPropertyAssignmentValue>
      <code>$this-&gt;parts</code>
    </InvalidPropertyAssignmentValue>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Comparison.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Composite.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <PossiblyInvalidCast>
      <code>$part</code>
    </PossiblyInvalidCast>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/From.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Func.php">
    <LessSpecificReturnStatement>
      <code>$this-&gt;arguments</code>
    </LessSpecificReturnStatement>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MoreSpecificReturnType>
      <code>list&lt;mixed&gt;</code>
    </MoreSpecificReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/GroupBy.php">
    <NonInvariantDocblockPropertyType>
      <code>$parts</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Join.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <PossiblyNullArgument>
      <code>$this-&gt;conditionType</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Literal.php">
    <NonInvariantDocblockPropertyType>
      <code>$parts</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Math.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/OrderBy.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Orx.php">
    <NonInvariantDocblockPropertyType>
      <code>$allowedClasses</code>
      <code>$parts</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Expr/Select.php">
    <NonInvariantDocblockPropertyType>
      <code>$allowedClasses</code>
      <code>$parts</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="lib/Doctrine/ORM/Query/Filter/SQLFilter.php">
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MissingClosureParamType>
      <code>$value</code>
    </MissingClosureParamType>
    <MissingClosureReturnType>
      <code>static function ($value) use ($connection, $param) {</code>
    </MissingClosureReturnType>
    <PropertyTypeCoercion>
      <code>$this-&gt;parameters</code>
    </PropertyTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Query/Parser.php">
    <ArgumentTypeCoercion>
      <code>$stringPattern</code>
    </ArgumentTypeCoercion>
    <InvalidNullableReturnType>
      <code>AST\SelectStatement|AST\UpdateStatement|AST\DeleteStatement</code>
    </InvalidNullableReturnType>
    <InvalidPropertyAssignmentValue>
      <code>$this-&gt;queryComponents</code>
    </InvalidPropertyAssignmentValue>
    <InvalidReturnStatement>
      <code>$factors[0]</code>
      <code>$primary</code>
      <code>$terms[0]</code>
      <code>$this-&gt;CollectionMemberExpression()</code>
      <code>$this-&gt;ComparisonExpression()</code>
      <code>$this-&gt;EmptyCollectionComparisonExpression()</code>
      <code>$this-&gt;ExistsExpression()</code>
      <code>$this-&gt;InExpression()</code>
      <code>$this-&gt;InstanceOfExpression()</code>
      <code>$this-&gt;LikeExpression()</code>
      <code>$this-&gt;NullComparisonExpression()</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>AST\ArithmeticFactor</code>
      <code>AST\ArithmeticTerm</code>
      <code>AST\BetweenExpression|</code>
      <code>AST\SimpleArithmeticExpression|AST\ArithmeticTerm</code>
    </InvalidReturnType>
    <InvalidStringClass>
      <code>new $functionClass($functionName)</code>
      <code>new $functionClass($functionName)</code>
      <code>new $functionClass($functionName)</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>$function</code>
      <code>$function</code>
      <code>$function</code>
    </LessSpecificReturnStatement>
    <NullableReturnStatement>
      <code>$statement</code>
    </NullableReturnStatement>
    <PossiblyFalseArgument>
      <code>strrpos($fromClassName, '\\')</code>
    </PossiblyFalseArgument>
    <PossiblyInvalidArgument>
      <code>$AST</code>
      <code>$conditionalExpression</code>
      <code>$expr</code>
      <code>$pathExp</code>
      <code>$this-&gt;ConditionalExpression()</code>
      <code>$this-&gt;ConditionalExpression()</code>
      <code>$this-&gt;lexer-&gt;getLiteral($token)</code>
      <code>$this-&gt;lexer-&gt;getLiteral($token)</code>
      <code>$this-&gt;lexer-&gt;getLiteral($token)</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$this-&gt;ConditionalExpression()</code>
      <code>$this-&gt;ConditionalExpression()</code>
      <code>$this-&gt;SimpleArithmeticExpression()</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PossiblyNullArgument>
      <code>$dql</code>
      <code>$this-&gt;query-&gt;getDQL()</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess>
      <code>$this-&gt;lexer-&gt;glimpse()['type']</code>
      <code>$token['value']</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullReference>
      <code>$this-&gt;lexer-&gt;glimpse()</code>
      <code>$token</code>
    </PossiblyNullReference>
    <PossiblyUndefinedVariable>
      <code>$args</code>
    </PossiblyUndefinedVariable>
    <RedundantCondition>
      <code>$this-&gt;lexer-&gt;lookahead !== null</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>$AST instanceof AST\SelectStatement</code>
      <code>$token === Lexer::T_IDENTIFIER</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Query/ParserResult.php">
    <PropertyNotSetInConstructor>
      <code>$_sqlExecutor</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Query/QueryExpressionVisitor.php">
    <InvalidReturnStatement>
      <code>new ArrayCollection($this-&gt;parameters)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>ArrayCollection&lt;int, mixed&gt;</code>
    </InvalidReturnType>
    <RedundantConditionGivenDocblockType>
      <code>Comparison::EQ</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Query/ResultSetMappingBuilder.php">
    <ArgumentTypeCoercion>
      <code>$class</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>addNamedNativeQueryEntityResultMapping</code>
      <code>addNamedNativeQueryEntityResultMapping</code>
      <code>addNamedNativeQueryResultClassMapping</code>
      <code>addNamedNativeQueryResultSetMapping</code>
    </DeprecatedMethod>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <PossiblyUndefinedArrayOffset>
      <code>$associationMapping['joinColumns']</code>
      <code>$associationMapping['joinColumns']</code>
      <code>$associationMapping['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Query/SqlWalker.php">
    <DocblockTypeContradiction>
      <code>''</code>
      <code>is_string($expression)</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
      <code>string</code>
    </ImplementedReturnTypeMismatch>
    <ImplicitToStringCast>
      <code>$expr</code>
    </ImplicitToStringCast>
    <InvalidArgument>
      <code>$assoc</code>
      <code>$condExpr</code>
      <code>$condTerm</code>
      <code>$factor</code>
    </InvalidArgument>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <MoreSpecificImplementedParamType>
      <code>$query</code>
    </MoreSpecificImplementedParamType>
    <PossiblyInvalidArgument>
      <code>$aggExpression-&gt;pathExpression</code>
      <code>$whereClause-&gt;conditionalExpression</code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code>$AST-&gt;whereClause</code>
      <code>$AST-&gt;whereClause</code>
      <code>$AST-&gt;whereClause</code>
      <code>$arithmeticExpr-&gt;simpleArithmeticExpression</code>
      <code>$arithmeticExpr-&gt;subselect</code>
      <code>$condExpr</code>
      <code>$identificationVariableDecl-&gt;rangeVariableDeclaration</code>
      <code>$subselect-&gt;whereClause</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayOffset>
      <code>$targetClass-&gt;associationMappings</code>
      <code>$targetClass-&gt;associationMappings</code>
      <code>$this-&gt;scalarResultAliasMap</code>
      <code>$this-&gt;scalarResultAliasMap</code>
    </PossiblyNullArrayOffset>
    <PossiblyNullReference>
      <code>dispatch</code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinColumns']</code>
      <code>$assoc['joinColumns']</code>
      <code>$assoc['joinColumns']</code>
      <code>$assoc['joinTable']</code>
      <code>$assoc['sourceToTargetKeyColumns']</code>
      <code>$assoc['targetToSourceKeyColumns']</code>
      <code>$assoc['type']</code>
      <code>$assoc['type']</code>
      <code>$association['sourceToTargetKeyColumns']</code>
      <code>$association['targetToSourceKeyColumns']</code>
      <code>$owningAssoc['joinTable']</code>
      <code>$owningAssoc['targetToSourceKeyColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantConditionGivenDocblockType>
      <code>$whereClause !== null</code>
      <code>($factor-&gt;not ? 'NOT ' : '') . $this-&gt;walkConditionalPrimary($factor-&gt;conditionalPrimary)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Query/TreeWalkerAdapter.php">
    <InvalidNullableReturnType>
      <code>getExecutor</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code>null</code>
    </NullableReturnStatement>
  </file>
  <file src="lib/Doctrine/ORM/Query/TreeWalkerChain.php">
    <InvalidNullableReturnType>
      <code>getExecutor</code>
    </InvalidNullableReturnType>
    <MissingParamType>
      <code>$dqlAlias</code>
    </MissingParamType>
    <NullableReturnStatement>
      <code>null</code>
    </NullableReturnStatement>
    <ParamNameMismatch>
      <code>$condPrimary</code>
    </ParamNameMismatch>
  </file>
  <file src="lib/Doctrine/ORM/Query/TreeWalkerChainIterator.php">
    <ImplementedParamTypeMismatch>
      <code>$value</code>
    </ImplementedParamTypeMismatch>
    <ImplementedReturnTypeMismatch>
      <code>TreeWalker|null</code>
      <code>class-string&lt;TreeWalker&gt;|false</code>
    </ImplementedReturnTypeMismatch>
    <PossiblyNullArrayOffset>
      <code>$this-&gt;walkers</code>
    </PossiblyNullArrayOffset>
    <PropertyTypeCoercion>
      <code>$this-&gt;walkers</code>
      <code>$this-&gt;walkers</code>
    </PropertyTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/QueryBuilder.php">
    <ArgumentTypeCoercion>
      <code>$args</code>
      <code>$args</code>
      <code>$args</code>
      <code>$args</code>
      <code>[$rootAlias =&gt; $join]</code>
      <code>[$rootAlias =&gt; $join]</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>getRootAlias</code>
      <code>getRootAlias</code>
    </DeprecatedMethod>
    <FalsableReturnStatement>
      <code>! $filteredParameters-&gt;isEmpty() ? $filteredParameters-&gt;first() : null</code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType>
      <code>Parameter|null</code>
    </InvalidFalsableReturnType>
    <InvalidPropertyAssignmentValue>
      <code>new ArrayCollection($parameters)</code>
    </InvalidPropertyAssignmentValue>
    <LessSpecificReturnStatement>
      <code>$aliases</code>
      <code>$entities</code>
    </LessSpecificReturnStatement>
    <MethodSignatureMustProvideReturnType>
      <code>__toString</code>
    </MethodSignatureMustProvideReturnType>
    <MoreSpecificReturnType>
      <code>list&lt;string&gt;</code>
      <code>list&lt;string&gt;</code>
    </MoreSpecificReturnType>
    <PossiblyFalseArgument>
      <code>$spacePos</code>
      <code>$spacePos</code>
    </PossiblyFalseArgument>
    <PossiblyFalseOperand>
      <code>$spacePos</code>
      <code>$spacePos</code>
    </PossiblyFalseOperand>
    <PossiblyInvalidIterator>
      <code>$dqlPart</code>
    </PossiblyInvalidIterator>
    <PossiblyNullArgument>
      <code>$alias</code>
      <code>$alias</code>
    </PossiblyNullArgument>
    <RedundantConditionGivenDocblockType>
      <code>self::SELECT</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Repository/DefaultRepositoryFactory.php">
    <InvalidReturnStatement>
      <code>$this-&gt;repositoryList[$repositoryHash]</code>
      <code>$this-&gt;repositoryList[$repositoryHash] = $this-&gt;createRepository($entityManager, $entityName)</code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>ObjectRepository</code>
    </InvalidReturnType>
    <TypeDoesNotContainType>
      <code>$repository instanceof EntityRepository</code>
    </TypeDoesNotContainType>
    <UnsafeInstantiation>
      <code>new $repositoryClassName($entityManager, $metadata)</code>
    </UnsafeInstantiation>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ClearCache/CollectionRegionCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <PossiblyNullReference>
      <code>evictAll</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ClearCache/EntityRegionCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <PossiblyNullReference>
      <code>evictAll</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ClearCache/MetadataCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ClearCache/QueryCommand.php">
    <DeprecatedMethod>
      <code>getQueryCacheImpl</code>
    </DeprecatedMethod>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ClearCache/QueryRegionCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ClearCache/ResultCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ConvertDoctrine1SchemaCommand.php">
    <ArgumentTypeCoercion>
      <code>$fromPaths</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>ClassMetadataExporter</code>
      <code>ClassMetadataExporter</code>
      <code>ClassMetadataExporter|null</code>
      <code>EntityGenerator</code>
      <code>EntityGenerator</code>
      <code>EntityGenerator|null</code>
      <code>new ClassMetadataExporter()</code>
      <code>new ConvertDoctrine1Schema($fromPaths)</code>
      <code>new EntityGenerator()</code>
      <code>private $entityGenerator = null;</code>
      <code>private $metadataExporter = null;</code>
    </DeprecatedClass>
    <InvalidArgument>
      <code>$metadata</code>
    </InvalidArgument>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ConvertMappingCommand.php">
    <ArgumentTypeCoercion>
      <code>$metadata</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>AbstractExporter</code>
      <code>new ClassMetadataExporter()</code>
      <code>new DisconnectedClassMetadataFactory()</code>
      <code>new EntityGenerator()</code>
    </DeprecatedClass>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <NoInterfaceProperties>
      <code>$class-&gt;name</code>
    </NoInterfaceProperties>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/EnsureProductionSettingsCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/GenerateEntitiesCommand.php">
    <ArgumentTypeCoercion>
      <code>$metadatas</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>new DisconnectedClassMetadataFactory()</code>
      <code>new EntityGenerator()</code>
    </DeprecatedClass>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <NoInterfaceProperties>
      <code>$metadata-&gt;name</code>
    </NoInterfaceProperties>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/GenerateProxiesCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <NoInterfaceProperties>
      <code>$metadata-&gt;name</code>
    </NoInterfaceProperties>
    <PossiblyNullArgument>
      <code>$em-&gt;getConfiguration()-&gt;getProxyDir()</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/GenerateRepositoriesCommand.php">
    <DeprecatedClass>
      <code>new EntityRepositoryGenerator()</code>
    </DeprecatedClass>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <NoInterfaceProperties>
      <code>$metadata-&gt;customRepositoryClassName</code>
    </NoInterfaceProperties>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/InfoCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <PossiblyNullReference>
      <code>getAllClassNames</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/MappingDescribeCommand.php">
    <ArgumentTypeCoercion>
      <code>$metadata-&gt;entityListeners</code>
    </ArgumentTypeCoercion>
    <PossiblyNullReference>
      <code>getAllClassNames</code>
    </PossiblyNullReference>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/RunDqlCommand.php">
    <DeprecatedClass>
      <code>Debug::dump($resultSet, (int) $input-&gt;getOption('depth'), true, false)</code>
    </DeprecatedClass>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/AbstractCommand.php">
    <InvalidNullableReturnType>
      <code>int</code>
    </InvalidNullableReturnType>
    <NullableReturnStatement>
      <code>$this-&gt;executeSchemaCommand($input, $output, new SchemaTool($em), $metadatas, $ui)</code>
    </NullableReturnStatement>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/CreateCommand.php">
    <ArgumentTypeCoercion>
      <code>$metadatas</code>
      <code>$metadatas</code>
    </ArgumentTypeCoercion>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/DropCommand.php">
    <ArgumentTypeCoercion>
      <code>$metadatas</code>
      <code>$metadatas</code>
      <code>$metadatas</code>
    </ArgumentTypeCoercion>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <PossiblyNullArgument>
      <code>$this-&gt;getName()</code>
      <code>$this-&gt;getName()</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/SchemaTool/UpdateCommand.php">
    <ArgumentTypeCoercion>
      <code>$metadatas</code>
    </ArgumentTypeCoercion>
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
    <PossiblyNullArgument>
      <code>$this-&gt;getName()</code>
      <code>$this-&gt;getName()</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/Command/ValidateSchemaCommand.php">
    <MissingReturnType>
      <code>configure</code>
    </MissingReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Console/MetadataFilter.php">
    <InvalidArgument>
      <code>new ArrayIterator($metadatas)</code>
    </InvalidArgument>
    <MissingTemplateParam>
      <code>MetadataFilter</code>
    </MissingTemplateParam>
  </file>
  <file src="lib/Doctrine/ORM/Tools/ConvertDoctrine1Schema.php">
    <PossiblyUndefinedArrayOffset>
      <code>$column['type']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Tools/DebugUnitOfWorkListener.php">
    <PossiblyNullArgument>
      <code>$entity</code>
      <code>$entity</code>
    </PossiblyNullArgument>
    <RedundantConditionGivenDocblockType>
      <code>$state === UnitOfWork::STATE_DETACHED</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/EntityGenerator.php">
    <ArgumentTypeCoercion>
      <code>$this-&gt;getClassToExtend()</code>
      <code>$this-&gt;getClassToExtend() ?: $metadata-&gt;name</code>
      <code>$this-&gt;getClassToExtend() ?: $metadata-&gt;name</code>
      <code>array_map('strlen', $paramTypes)</code>
    </ArgumentTypeCoercion>
    <InvalidArrayOffset>
      <code>$tokens[$i - 1]</code>
    </InvalidArrayOffset>
    <PossiblyFalseArgument>
      <code>$last</code>
      <code>strrpos($metadata-&gt;name, '\\')</code>
    </PossiblyFalseArgument>
    <PossiblyNullArgument>
      <code>$variableType</code>
    </PossiblyNullArgument>
    <PropertyNotSetInConstructor>
      <code>$classToExtend</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $embeddablesImmutable</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code>isset($metadata-&gt;lifecycleCallbacks)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/EntityRepositoryGenerator.php">
    <ArgumentTypeCoercion>
      <code>$fullClassName</code>
      <code>$fullClassName</code>
      <code>$fullClassName</code>
    </ArgumentTypeCoercion>
    <PossiblyFalseOperand>
      <code>strrpos($fullClassName, '\\')</code>
    </PossiblyFalseOperand>
    <PropertyTypeCoercion>
      <code>$repositoryName</code>
    </PropertyTypeCoercion>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Export/ClassMetadataExporter.php">
    <DeprecatedClass>
      <code>Driver\AbstractExporter</code>
      <code>Driver\AnnotationExporter::class</code>
      <code>Driver\PhpExporter::class</code>
      <code>Driver\XmlExporter::class</code>
      <code>Driver\YamlExporter::class</code>
      <code>Driver\YamlExporter::class</code>
      <code>ExportException::invalidExporterDriverType($type)</code>
    </DeprecatedClass>
    <InvalidStringClass>
      <code>new $class($dest)</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>new $class($dest)</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>Driver\AbstractExporter</code>
    </MoreSpecificReturnType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Export/Driver/AbstractExporter.php">
    <DeprecatedClass>
      <code>ExportException::attemptOverwriteExistingFile($path)</code>
    </DeprecatedClass>
    <DeprecatedConstant>
      <code>ClassMetadataInfo::GENERATOR_TYPE_UUID</code>
    </DeprecatedConstant>
    <InvalidNullableReturnType>
      <code>string</code>
    </InvalidNullableReturnType>
    <PossiblyNullArgument>
      <code>$this-&gt;_outputDir</code>
    </PossiblyNullArgument>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Export/Driver/AnnotationExporter.php">
    <DeprecatedClass>
      <code>AbstractExporter</code>
      <code>EntityGenerator</code>
      <code>EntityGenerator|null</code>
    </DeprecatedClass>
    <NonInvariantDocblockPropertyType>
      <code>$_extension</code>
    </NonInvariantDocblockPropertyType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Export/Driver/PhpExporter.php">
    <ArgumentTypeCoercion>
      <code>$metadata-&gt;changeTrackingPolicy</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>AbstractExporter</code>
    </DeprecatedClass>
    <NonInvariantDocblockPropertyType>
      <code>$_extension</code>
    </NonInvariantDocblockPropertyType>
    <PossiblyUndefinedArrayOffset>
      <code>$associationMapping['joinColumns']</code>
      <code>$associationMapping['orphanRemoval']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantConditionGivenDocblockType>
      <code>$metadata-&gt;table</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Export/Driver/XmlExporter.php">
    <ArgumentTypeCoercion>
      <code>$metadata-&gt;changeTrackingPolicy</code>
      <code>$simpleXml-&gt;asXML()</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>AbstractExporter</code>
    </DeprecatedClass>
    <InvalidArrayOffset>
      <code>$field['version']</code>
    </InvalidArrayOffset>
    <NonInvariantDocblockPropertyType>
      <code>$_extension</code>
    </NonInvariantDocblockPropertyType>
    <PossiblyFalseArgument>
      <code>$simpleXml-&gt;asXML()</code>
    </PossiblyFalseArgument>
    <PossiblyNullReference>
      <code>addAttribute</code>
    </PossiblyNullReference>
    <RedundantCondition>
      <code>$field['associationKey']</code>
      <code>isset($field['associationKey']) &amp;&amp; $field['associationKey']</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>isset($metadata-&gt;lifecycleCallbacks)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Export/Driver/YamlExporter.php">
    <ArgumentTypeCoercion>
      <code>$metadata-&gt;changeTrackingPolicy</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>AbstractExporter</code>
    </DeprecatedClass>
    <DocblockTypeContradiction>
      <code>['name' =&gt; null]</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$array</code>
    </InvalidArgument>
    <LessSpecificReturnStatement>
      <code>$array</code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>array&lt;string, mixed&gt;&amp;array{entityListeners: array&lt;class-string, array&lt;string, array{string}&gt;&gt;}</code>
    </MoreSpecificReturnType>
    <NonInvariantDocblockPropertyType>
      <code>$_extension</code>
    </NonInvariantDocblockPropertyType>
    <PossiblyUndefinedArrayOffset>
      <code>$associationMapping['joinColumns']</code>
      <code>$associationMapping['orphanRemoval']</code>
      <code>$associationMapping['orphanRemoval']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantConditionGivenDocblockType>
      <code>$metadata-&gt;table</code>
      <code>isset($metadata-&gt;lifecycleCallbacks)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Pagination/CountOutputWalker.php">
    <MoreSpecificImplementedParamType>
      <code>$query</code>
    </MoreSpecificImplementedParamType>
    <PossiblyUndefinedArrayOffset>
      <code>$rootClass-&gt;associationMappings[$property]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Pagination/LimitSubqueryOutputWalker.php">
    <MoreSpecificImplementedParamType>
      <code>$query</code>
    </MoreSpecificImplementedParamType>
    <PossiblyFalseArgument>
      <code>strrpos($orderByItemString, ' ')</code>
    </PossiblyFalseArgument>
    <PossiblyNullIterator>
      <code>$orderByClause-&gt;orderByItems</code>
    </PossiblyNullIterator>
    <PossiblyNullPropertyAssignmentValue>
      <code>$AST-&gt;orderByClause</code>
      <code>$query-&gt;getFirstResult()</code>
      <code>$query-&gt;getMaxResults()</code>
    </PossiblyNullPropertyAssignmentValue>
    <PossiblyNullPropertyFetch>
      <code>$orderByClause-&gt;orderByItems</code>
    </PossiblyNullPropertyFetch>
    <PossiblyUndefinedArrayOffset>
      <code>$rootClass-&gt;associationMappings[$property]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Pagination/Paginator.php">
    <ArgumentTypeCoercion>
      <code>$parameters</code>
    </ArgumentTypeCoercion>
    <RedundantCastGivenDocblockType>
      <code>(bool) $fetchJoinCollection</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Pagination/RowNumberOverFunction.php">
    <PropertyNotSetInConstructor>
      <code>$orderByClause</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Pagination/WhereInWalker.php">
    <DocblockTypeContradiction>
      <code>$AST-&gt;whereClause-&gt;conditionalExpression instanceof ConditionalExpression
                || $AST-&gt;whereClause-&gt;conditionalExpression instanceof ConditionalFactor</code>
      <code>$AST-&gt;whereClause-&gt;conditionalExpression instanceof ConditionalFactor</code>
      <code>$AST-&gt;whereClause-&gt;conditionalExpression instanceof ConditionalPrimary</code>
    </DocblockTypeContradiction>
    <MissingClosureReturnType>
      <code>static function ($id) use ($connection, $type) {</code>
    </MissingClosureReturnType>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$AST-&gt;whereClause-&gt;conditionalExpression</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <RedundantConditionGivenDocblockType>
      <code>$AST-&gt;whereClause-&gt;conditionalExpression instanceof ConditionalExpression
                || $AST-&gt;whereClause-&gt;conditionalExpression instanceof ConditionalFactor</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/SchemaTool.php">
    <ArgumentTypeCoercion>
      <code>$classes</code>
    </ArgumentTypeCoercion>
    <DeprecatedMethod>
      <code>canEmulateSchemas</code>
    </DeprecatedMethod>
    <MissingClosureParamType>
      <code>$asset</code>
    </MissingClosureParamType>
    <PossiblyNullArgument>
      <code>$referencedFieldName</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinColumns']</code>
      <code>$class-&gt;getAssociationMapping($fieldName)['joinColumns']</code>
      <code>$fieldMapping['precision']</code>
      <code>$fieldMapping['scale']</code>
      <code>$idMapping['joinColumns']</code>
      <code>$mapping['joinColumns']</code>
      <code>$mapping['joinTable']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantCondition>
      <code>is_numeric($indexName)</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>assert(is_array($assoc))</code>
      <code>is_array($assoc)</code>
    </RedundantConditionGivenDocblockType>
    <TypeDoesNotContainType>
      <code>$indexName</code>
    </TypeDoesNotContainType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/SchemaValidator.php">
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinColumns']</code>
      <code>$assoc['joinTable']</code>
      <code>$assoc['relationToSourceKeyColumns']</code>
      <code>$assoc['relationToTargetKeyColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <RedundantConditionGivenDocblockType>
      <code>$assoc['orderBy'] !== null</code>
      <code>isset($assoc['orderBy']) &amp;&amp; $assoc['orderBy'] !== null</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="lib/Doctrine/ORM/Tools/Setup.php">
    <ArgumentTypeCoercion>
      <code>$paths</code>
    </ArgumentTypeCoercion>
    <DeprecatedClass>
      <code>new ClassLoader('Doctrine', $directory)</code>
      <code>new ClassLoader('Symfony\Component', $directory . '/Doctrine')</code>
    </DeprecatedClass>
    <UnresolvableInclude>
      <code>require_once $directory . '/Doctrine/Common/ClassLoader.php'</code>
      <code>require_once dirname($directory) . '/src/ClassLoader.php'</code>
    </UnresolvableInclude>
  </file>
  <file src="lib/Doctrine/ORM/UnitOfWork.php">
    <DocblockTypeContradiction>
      <code>! is_object($object)</code>
      <code>is_object($object)</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$collectionToDelete</code>
      <code>$collectionToUpdate</code>
      <code>$em-&gt;getMetadataFactory()</code>
    </InvalidArgument>
    <InvalidNullableReturnType>
      <code>object</code>
    </InvalidNullableReturnType>
    <InvalidPropertyAssignmentValue>
      <code>$this-&gt;entityChangeSets</code>
      <code>$this-&gt;entityChangeSets</code>
    </InvalidPropertyAssignmentValue>
    <MissingParamType>
      <code>$managedCopy</code>
      <code>$prevManagedCopy</code>
      <code>$previousManagedCopy</code>
    </MissingParamType>
    <NoValue>
      <code>$entityState</code>
      <code>$entityState</code>
    </NoValue>
    <NullableReturnStatement>
      <code>$this-&gt;identityMap[$rootClassName][$idHash]</code>
    </NullableReturnStatement>
    <PossiblyInvalidArgument>
      <code>$value</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidArrayOffset>
      <code>$this-&gt;identityMap[$rootClassName]</code>
    </PossiblyInvalidArrayOffset>
    <PossiblyNullArgument>
      <code>$assoc</code>
      <code>$assoc</code>
      <code>$assoc</code>
      <code>$assoc</code>
      <code>$assoc['targetEntity']</code>
      <code>$class-&gt;getTypeOfField($class-&gt;getSingleIdentifierFieldName())</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collection-&gt;getOwner()</code>
      <code>$collectionToDelete-&gt;getMapping()</code>
      <code>$collectionToUpdate-&gt;getMapping()</code>
      <code>$entity</code>
      <code>$entity</code>
      <code>$owner</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess>
      <code>$assoc['targetEntity']</code>
      <code>$assoc['type']</code>
    </PossiblyNullArrayAccess>
    <PossiblyNullArrayOffset>
      <code>$class-&gt;reflFields</code>
      <code>$targetClass-&gt;reflFields</code>
    </PossiblyNullArrayOffset>
    <PossiblyNullReference>
      <code>buildCachedCollectionPersister</code>
      <code>buildCachedEntityPersister</code>
      <code>getCacheFactory</code>
      <code>getCacheFactory</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
      <code>setValue</code>
    </PossiblyNullReference>
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinColumns']</code>
      <code>$assoc['orphanRemoval']</code>
      <code>$assoc['targetToSourceKeyColumns']</code>
    </PossiblyUndefinedArrayOffset>
    <PossiblyUndefinedMethod>
      <code>unwrap</code>
      <code>unwrap</code>
      <code>unwrap</code>
    </PossiblyUndefinedMethod>
    <RedundantCondition>
      <code>$i &gt;= 0 &amp;&amp; $this-&gt;entityDeletions</code>
      <code>$this-&gt;entityDeletions</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>is_array($entity)</code>
    </RedundantConditionGivenDocblockType>
    <ReferenceConstraintViolation>
      <code>$visited</code>
    </ReferenceConstraintViolation>
  </file>
  <file src="lib/Doctrine/ORM/Utility/HierarchyDiscriminatorResolver.php">
    <NoInterfaceProperties>
      <code>$rootClassMetadata-&gt;name</code>
      <code>$rootClassMetadata-&gt;subClasses</code>
    </NoInterfaceProperties>
  </file>
  <file src="lib/Doctrine/ORM/Utility/IdentifierFlattener.php">
    <PossiblyUndefinedArrayOffset>
      <code>$class-&gt;associationMappings[$field]['joinColumns']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
  <file src="lib/Doctrine/ORM/Utility/PersisterHelper.php">
    <PossiblyNullArgument>
      <code>$assoc['mappedBy']</code>
    </PossiblyNullArgument>
    <PossiblyUndefinedArrayOffset>
      <code>$assoc['joinTable']</code>
    </PossiblyUndefinedArrayOffset>
  </file>
</files>
